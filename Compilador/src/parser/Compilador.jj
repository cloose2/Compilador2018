
options {
   DEBUG_PARSER = false;
   DEBUG_TOKEN_MANAGER = false;
}


PARSER_BEGIN(Compilador)
package parser;
import semantico.*;
import java.util.LinkedList;
import java.io.*;
import comando.*;
import apoio.*;
import geradorCodigo.*;
public class Compilador {
	static Tabela tabela = new Tabela();
	
	public static void main(String args[])  throws ParseException  {

	   //Compilador analisador = null;
	
      try {

        Compilador analisador = new Compilador(new FileInputStream(Config.nomeArquivo+Config.extensaoFonte));
        //System.out.println("entrou");
        Compilador.inicio();
        System.out.println("Análise léxica, sintática e semântico sem erros!");
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}

PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" } 

TOKEN [IGNORE_CASE] : {
         <EXIBE: "exibe" > |
         <LEITURA: "le" > | 
         <SE: "se" > |
         <FIMSE: "fim-se" > |
         <ENQUANTO: "enquanto" >   |
         <FIMENQUANTO: "fim-enquanto" >
}

TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
 }

TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< PV: ";" > |
	< VIRGULA: "," > |
	< STRING: "\"" (~["\""])* "\"" > |
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
 }

 TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
 }

TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< OU: "OR" > |
	< ATRIB: "<-"  > |
	< IGUAL: "=" > |
	< CONCAT: "&" > 
 }
void inicio() : {ListaComandosAltoNivel listaComandosAltoNivel = null; }
{
	listaComandosAltoNivel = programa() <EOF> 
}
ListaComandosAltoNivel programa() : {ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();}
{
   (
     comando(listaComandosAltoNivel)
   )*
   {
		return listaComandosAltoNivel;
   }
}
void comando(ListaComandosAltoNivel listaComandosAltoNivel) : {listaComandosAltoNivel = null;} 
{
        atribuicao(listaComandosAltoNivel)
      | declaracao()
      | se(listaComandosAltoNivel)
      | enquanto(listaComandosAltoNivel)
      | le(listaComandosAltoNivel)
      | exibe(listaComandosAltoNivel)
}

//			EXPRESSOES
Expressao expressao(): {Expressao expressao_lista = new Expressao(); } 
  {
  	expressao2(expressao_lista){return expressao_lista; }
  }

void expressao2(Expressao expressao_lista) : { Token t; }
{
  termo(expressao_lista)(t=< OU >termo(expressao_lista)
   {
     expressao_lista.addItemPosfixo(new Operador(t, TipoOperador.OR));
   }
   )*
}
  	

void termo (Expressao expressao_lista) : {Token t; }//igualdade
{
  //termo1() (<IGUAL> termo1())?
  termo1(expressao_lista)
  (
    t=< IGUAL >termo1(expressao_lista)
   		{
     		expressao_lista.addItemPosfixo(new Operador(t, TipoOperador.IGUAL));
   		}
   )?
}
  
void termo1(Expressao expressao_lista) : {Token t; } //concatenacao
{
  //termo2() (<CONCAT> termo2())*
  termo2(expressao_lista)
  (
    t=< CONCAT >termo2(expressao_lista)
    	{
    	  expressao_lista.addItemPosfixo(new Operador(t, TipoOperador.CONCAT));
    	}
  )*
}
  
void termo2(Expressao expressao_lista) : {Token t; TipoOperador tipo; } //soma e subtração
{
  termo3(expressao_lista)
  (
    (
      t=< SOMA > { tipo = TipoOperador.ADD; }
      |
      t=< SUB > { tipo = TipoOperador.SUB; }
    )
    termo3(expressao_lista)
    	{
    	  expressao_lista.addItemPosfixo(new Operador(t, tipo));
    	}
  )*
}

void termo3(Expressao expressao_lista) : {Token t; TipoOperador tipo;} //multiplicacao e divisao
{ 
  termo4(expressao_lista)
  (
    (
      t=< MUL > { tipo = TipoOperador.MUL; }
      |
      t=< DIV > { tipo = TipoOperador.DIV; }
    )
    termo4(expressao_lista)
    	{
    	  expressao_lista.addItemPosfixo(new Operador(t, tipo));
    	}
  )*
}

void termo4(Expressao expressao_lista) : { Token t;} //expressao entre parenteces
{
  	
  	(
  	  	< AP >expressao2(expressao_lista)< FP >
  		| t=< NUM >
  			{
  			  //System.out.println("aqui veio Satanas");
  			  Operando operador = new Operando(t, TipoDado.NUMERO, TipoElemento.CTE);
  			  //System.out.println("matarei o golias");
  			  expressao_lista.addItemPosfixo(operador);
  			  //System.out.println("ate aqui JUDAS");
  			  //expressao_lista.imprime();
  			}
  		| < SOMA >t=<NUM >
  			{
  			  expressao_lista.addItemPosfixo(new Operando(t, TipoDado.NUMERO, TipoElemento.CTE));
  			}
		| < SUB >t=<NUM>
			{
			  expressao_lista.addItemPosfixo(new Operando(t, TipoDado.NUMERO, TipoElemento.CTE));
			}
	
		| t=< VAR >
			{
				AcoesSemantica.variavelNaoDeclarada(t, tabela);
				expressao_lista.addItemPosfixo(new Operando(t, tabela.consultaTipo(t.image), TipoElemento.VAR));
	 		}
		| t=< STRING >
			{
			  expressao_lista.addItemPosfixo(new Operando(t, TipoDado.PALAVRA, TipoElemento.CTE));
			}
	)
}

//			COMANDOS
void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel) :
	{Simbolo simb; Token t; Expressao expressao; ComandoAtribuicao comandoAtribuicao;}
{
	t = <VAR>
	{
        AcoesSemantica.variavelNaoDeclarada(t,tabela);
    }
    <ATRIB> /*{System.out.println("chegou2"); }*/ expressao = expressao() 
    {
		simb = new Simbolo(t, TipoDado.PALAVRA);
		comandoAtribuicao = new ComandoAtribuicao(t,tabela.consultaSimbolo(t.image),expressao);
		//System.out.println(comandoAtribuicao+"\n"); //Criação do comando OK
		//System.out.println(listaComandosAltoNivel+"\n");
  	   	//listaComandosAltoNivel.addComando(comandoAtribuicao);
		System.out.println(comandoAtribuicao.toString());
    }
    <PV>
}

void declaracao() : {Token t; TipoDado tipo; }
{
	(
	  <NUMERO> { tipo = TipoDado.NUMERO; }
	  |
	  <PALAVRA> { tipo = TipoDado.PALAVRA; }
	)
	t = <VAR> {AcoesSemantica.trataDeclaracao(tabela,t,tipo);}
	(  <ATRIB> expressao() )?
	(<VIRGULA>
		t = <VAR> 
		( <ATRIB> expressao() )? {AcoesSemantica.trataDeclaracao(tabela,t,tipo); }
	)* <PV>
}

void se(ListaComandosAltoNivel listaComandosAltoNivel) :
{Token t; Expressao expressao; ComandoCondicionalSimples comandoCondicional;} //if
{
  	t = <SE> <AP> expressao = expressao() <FP> listaComandosAltoNivel = programa()
  	 {
  	   comandoCondicional = new ComandoCondicionalSimples(t, expressao,listaComandosAltoNivel);
  	   //listaComandosAltoNivel.addComando(comandoCondicional);
  	   System.out.println(comandoCondicional.toString());
  	 }
  	<FIMSE>
}

void enquanto(ListaComandosAltoNivel listaComandosAltoNivel) :
 {Token t; Expressao expressao; ComandoEnquanto comandoEnquanto; } //while
{
  	t = <ENQUANTO> <AP> expressao = expressao() <FP> listaComandosAltoNivel = programa()
	 {
  	   comandoEnquanto = new ComandoEnquanto(t, expressao,listaComandosAltoNivel);
  	   //listaComandosAltoNivel.addComando(comandoEnquanto);
  	   System.out.println(comandoEnquanto.toString());
  	 }
  	<FIMENQUANTO>
}

void le(ListaComandosAltoNivel listaComandosAltoNivel) : { Token t; Token variavel; Simbolo simb; ComandoEntrada comandoEntrada; } //read
{
  	t = <LEITURA> variavel = <VAR>
  	   {
  	  	AcoesSemantica.variavelNaoDeclarada(variavel,tabela);
  	  	simb = new Simbolo(t, TipoDado.PALAVRA);
		comandoEntrada = new ComandoEntrada(t,simb);
		//listaComandosAltoNivel.addComando(comandoEntrada);
		System.out.println(comandoEntrada.toString());
  	   }
  	( <VIRGULA> <VAR>
		{
		  AcoesSemantica.variavelNaoDeclarada(variavel,tabela);
  	  	  simb = new Simbolo(t, TipoDado.PALAVRA);
		  comandoEntrada = new ComandoEntrada(t,simb);
		  //listaComandosAltoNivel.addComando(comandoEntrada);
		  System.out.println(comandoEntrada.toString());
		}
  	 )* <PV>
}

void exibe(ListaComandosAltoNivel listaComandosAltoNivel) : {Token t; Expressao expressao; ComandoSaida comandoSaida; } //print
{
  	t = <EXIBE> expressao = expressao()
  	 {
  	   comandoSaida = new ComandoSaida(t,expressao);
	   //listaComandosAltoNivel.addComando(comandoSaida);
	   System.out.println(comandoSaida.toString());
  	 }
  	 ( <VIRGULA> expressao = expressao()
		{
		  comandoSaida = new ComandoSaida(t,expressao);
	   	  //listaComandosAltoNivel.addComando(comandoSaida);
	      System.out.println(comandoSaida.toString());
		}
  	 )* <PV>
}
